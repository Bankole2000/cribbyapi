generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  id                   Int       @id @default(autoincrement())
  uuid                 String?   @unique @default(uuid()) @db.Uuid
  company              Company?  @relation(fields: [companyId], references: [id])
  companyId            Int?
  licenseUrl           String?   @db.VarChar(255)
  licenseIsImage       Boolean?  @db.Boolean
  licenseIsUpload      Boolean?  @db.Boolean
  licenseFilePath      String?   @db.VarChar(255)
  approved             Boolean?  @default(false) @db.Boolean
  approvedAt           DateTime? @db.Timestamptz(6)
  approvedBy           Support?  @relation(fields: [approvedById], references: [id])
  approvedById         Int?
  user                 User      @relation(fields: [userId], references: [id])
  userId               Int
  agentEmail           String?   @unique
  agentPhone           String?
  agentEmailIsVerified Boolean?  @default(false) @db.Boolean
  agentPhoneIsVerified Boolean?  @default(false) @db.Boolean
  rentals              Rental[]
  createdAt            DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime  @updatedAt
}

model Company {
  id              Int      @id @default(autoincrement())
  uuid            String?  @unique @default(uuid()) @db.Uuid
  email           String   @unique
  name            String   @db.VarChar(255)
  websiteUrl      String   @db.VarChar(255)
  address         String   @db.VarChar(255)
  locationCity    String   @db.VarChar(255)
  locationState   String   @db.VarChar(255)
  locationCountry String   @db.VarChar(255)
  phone           String   @db.VarChar(255)
  agents          Agent[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Support {
  id                   Int       @id @default(autoincrement())
  uuid                 String    @unique @default(uuid()) @db.Uuid
  agentApprovals       Agent[]
  profileVerifications Profile[]
  userData             User      @relation(fields: [userDataId], references: [id])
  userDataId           Int
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Rental {
  id          Int           @id @default(autoincrement())
  uuid        String        @unique @default(uuid()) @db.Uuid
  isPublished Boolean       @default(false) @db.Boolean
  title       String        @db.VarChar(255)
  shortDesc   String        @db.VarChar(255)
  agent       Agent         @relation(fields: [agentId], references: [id])
  agentId     Int
  images      RentalImage[]
  createdAt   DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime      @updatedAt
}

model RentalImage {
  id                 Int      @id @default(autoincrement())
  imageIndex         Int      @db.Integer
  uuid               String   @unique @default(uuid()) @db.Uuid
  imageResizedUrl    String   @db.VarChar(255)
  imageFullsizeUrl   String   @db.VarChar
  imageResizedPath   String   @db.VarChar(255)
  imageFullSizedPath String   @db.VarChar(255)
  rental             Rental   @relation(fields: [rentalId], references: [id])
  rentalId           Int
  createdAt          DateTime @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime @updatedAt
}

model User {
  id                     Int             @id @default(autoincrement())
  uuid                   String?         @unique @default(uuid()) @db.Uuid
  email                  String          @unique @db.VarChar(255)
  emailIsVerified        Boolean         @default(false) @db.Boolean
  emailVerificationToken String?         @db.Text
  dob                    DateTime        @db.Date
  tos                    Boolean         @default(false) @db.Boolean
  gender                 String          @db.VarChar(255)
  username               String          @unique @db.VarChar(255)
  password               String?         @db.VarChar(255)
  roles                  Role[]          @db.Json
  isOnline               Boolean?        @default(false) @db.Boolean
  lastSeen               DateTime?       @default(now()) @db.Timestamptz(6)
  profile                Profile?
  agentProfile           Agent?
  listings               Listing[]
  bookings               Booking[]
  contacts               Contact[]
  favoriteListings       Json            @default("[]") @db.Json
  favoriteRentals        Json            @default("[]") @db.Json
  supportProfile         Support?
  lastLogin              DateTime?       @default(now()) @db.Timestamptz(6)
  createdAt              DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt              DateTime        @updatedAt
  listingReviews         ListingReview[]
  listingRatings         ListingRating[]
}

model Hobby {
  id          Int       @id @default(autoincrement())
  uuid        String?   @unique @default(uuid()) @db.Uuid
  title       String?   @db.VarChar(255)
  description String?   @db.Text
  profiles    Profile[]
  emoticon    String?   @db.VarChar(255)
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt
}

model Profile {
  id                   Int       @id @default(autoincrement())
  uuid                 String    @unique @default(uuid()) @db.Uuid
  profileImageUrl      String?   @db.VarChar(255)
  profileImagePath     String?   @db.VarChar(255)
  identityCardImageUrl String?   @db.VarChar(200)
  identityVerified     Boolean   @default(false) @db.Boolean
  IdentityVerifiedBy   Support?  @relation(fields: [IdentityVerifiedById], references: [id])
  IdentityVerifiedById Int?
  IdentityVerifiedAt   DateTime? @db.Timestamptz(6)
  firstname            String?   @db.VarChar(255)
  lastname             String?   @db.VarChar(255)
  phone                String?   @db.VarChar(255)
  phoneIsVerified      Boolean?  @default(false) @db.Boolean
  bio                  String?   @db.VarChar(255)
  instagramHandle      String?   @db.VarChar(255)
  twitterHandle        String?   @db.VarChar(255)
  snapchatUrl          String?   @db.VarChar(255)
  facebookUrl          String?   @db.VarChar(255)
  websiteUrl           String?   @db.VarChar(255)
  hobbies              Hobby[]
  user                 User?     @relation(fields: [userId], references: [id])
  userId               Int       @db.Integer
  createdAt            DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime  @updatedAt
}

model Listing {
  id                          Int                   @id @default(autoincrement())
  uuid                        String?               @unique @default(uuid()) @db.Uuid
  title                       String                @db.VarChar(255)
  shortDescription            String?               @db.VarChar(255)
  longDescription             String?               @db.Text
  additionalRules             String[]
  baseCurrency                Currency?             @relation(fields: [currencyId], references: [id])
  currencyId                  Int?
  basicPrice                  Decimal?              @default(0.00) @db.Decimal(10, 2)
  pricePerWeekend             Decimal?              @default(0.00) @db.Decimal(10, 2)
  pricePerWeek                Decimal?              @default(0.00) @db.Decimal(10, 2)
  pricePerMonth               Decimal?              @default(0.00) @db.Decimal(10, 2)
  guestCapacity               Int?
  guestArrivalDaysNotice      Int?
  guestBookingMonthsInAdvance Int?
  bookingStayDaysMin          Int?
  bookingStayDaysMax          Int?
  locationCountry             String?               @db.VarChar(2)
  locationState               String?               @db.VarChar(2)
  locationCity                String?
  streetAddress               String?
  listingPurpose              String?               @db.VarChar(255)
  listingType                 String?               @db.VarChar(255)
  latitude                    Decimal?
  longitude                   Decimal?
  amenities                   Amenity[]
  specialFeatures             String[]
  guestPreferences            String[]
  isPublished                 Boolean?              @default(false) @db.Boolean
  owner                       User                  @relation(fields: [ownerId], references: [id])
  ownerId                     Int
  images                      ListingImage[]
  bookings                    Booking[]
  reviews                     ListingReview[]
  ratings                     ListingRating[]
  createdAt                   DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt                   DateTime              @updatedAt
  houseRules                  ListingHasHouseRule[]
}

model ListingHasHouseRule {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid()) @db.Uuid
  listing     Listing   @relation(fields: [listingId], references: [id])
  rule        HouseRule @relation(fields: [houseRuleId], references: [id])
  isAllowed   Boolean
  listingId   Int
  houseRuleId Int
}

model HouseRule {
  id           Int                   @id @default(autoincrement())
  uuid         String                @unique @default(uuid()) @db.Uuid
  title        String
  description  String
  code         String
  faIconTrue   String
  faIconFalse  String
  mdiIconTrue  String
  mdiIconFalse String
  listings     ListingHasHouseRule[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model Amenity {
  id                Int              @id @default(autoincrement())
  uuid              String           @unique @default(uuid()) @db.Uuid
  title             String           @db.VarChar(255)
  description       String
  faIcon            String
  mdiIcon           String
  category          AmenityCategory? @relation(fields: [amenityCategoryId], references: [id])
  categoryId        Int
  listings          Listing[]
  amenityCategoryId Int?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model AmenityCategory {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid()) @db.Uuid
  title       String    @db.VarChar(255)
  description String    @db.Text
  amenities   Amenity[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Currency {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @default(uuid()) @db.Uuid
  symbol        String
  name          String
  nativeSymbol  String
  code          String    @unique
  rounding      Int
  decimalDigits Int
  pluralName    String
  Listing       Listing[]
}

model ListingReview {
  id              Int           @id @default(autoincrement())
  uuid            String        @unique @default(uuid()) @db.Uuid
  review          String
  reviewer        User          @relation(fields: [userId], references: [id])
  reviewerId      Int
  listing         Listing       @relation(fields: [listingId], references: [id])
  listingId       Int
  rating          ListingRating @relation(fields: [listingRatingId], references: [id])
  listingRatingId Int
  userId          Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model ListingRating {
  id            Int            @id @default(autoincrement())
  listing       Listing        @relation(fields: [listingId], references: [id])
  rating        Int
  postedBy      User           @relation(fields: [userId], references: [id])
  listingId     Int
  ListingReview ListingReview?
  userId        Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model CohabitOffer {
  id    Int    @id @default(autoincrement())
  uuid  String @unique @default(uuid()) @db.Uuid
  title String @db.VarChar(255)

}

model Contact {
  id          Int    @id @default(autoincrement())
  uuid        String @unique @default(uuid()) @db.Uuid
  inviter     User   @relation(fields: [inviterUuid], references: [uuid])
  inviterUuid String @db.Uuid
}

model ListingImage {
  id             Int      @id @default(autoincrement())
  uuid           String   @default(uuid()) @db.Uuid
  index          Int
  originalPath   String
  originalURL    String
  thumbnailPath  String
  thumbnailURL   String
  mediumSizePath String
  mediumSizeURL  String
  largeSizePath  String
  largeSizeURL   String
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt
  Listing        Listing? @relation(fields: [listingId], references: [id])
  listingId      Int?
}

model Booking {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid()) @db.Uuid
  listing   Listing  @relation(fields: [listingId], references: [id])
  listingId Int
  guest     User     @relation(fields: [guestId], references: [id])
  guestId   Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

model ExchangeRate {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique @default(uuid()) @db.Uuid
  from         String   @db.VarChar(3)
  to           String   @db.VarChar(3)
  exchangeRate Decimal
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  USER
  AGENT
  SUPPORT
  ADMIN
}
