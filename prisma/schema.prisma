generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  id         Int      @id @default(autoincrement())
  uuid       String?  @default(uuid()) @db.Uuid
  licenseUrl String?  @db.VarChar(255)
  approved   Boolean  @default(false) @db.Boolean
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  createdAt  DateTime @db.Timestamptz(6)
  updatedAt  DateTime @db.Timestamptz(6)

}

model User {
  id                     Int       @id @default(autoincrement())
  uuid                   String?   @default(uuid()) @db.Uuid
  email                  String?   @unique @db.VarChar(255)
  emailIsVerified        Boolean   @default(false) @db.Boolean
  emailVerificationToken String    @db.VarChar(255)
  dob                    DateTime  @db.Date
  tos                    Boolean   @default(false) @db.Boolean
  gender                 String?   @db.VarChar(255)
  username               String    @unique @db.VarChar(255)
  password               String?   @db.VarChar(255)
  createdAt              DateTime  @db.Timestamptz(6)
  updatedAt              DateTime  @db.Timestamptz(6)
  profile                Profile?
  agentProfile           Agent?
  listings               Listing[]
  bookings               Booking[]
}

model Profile {
  id                   Int     @id @default(autoincrement())
  profileImageUrl      String? @db.VarChar(255)
  profileImagePath     String? @db.VarChar(255)
  identityCardImageUrl String? @db.VarChar(200)
  identityVerified     Boolean @db.Boolean
  firstname            String? @db.VarChar(255)
  lastname             String? @db.VarChar(255)
  phone                String? @db.VarChar(255)
  bio                  String? @db.VarChar(255)
  user                 User?   @relation(fields: [userId], references: [id])
  userId               Int     @db.Integer
}

model Listing {
  id       Int       @id @default(autoincrement())
  uuid     String    @default(uuid()) @db.Uuid
  owner    User      @relation(fields: [ownerId], references: [id])
  ownerId  Int
  bookings Booking[]
}

model ListingImage {
  id    Int @id @default(autoincrement())
  index Int
}

model Booking {
  id        Int     @id @default(autoincrement())
  uuid      String  @default(uuid()) @db.Uuid
  listing   Listing @relation(fields: [listingId], references: [id])
  listingId Int
  guest     User    @relation(fields: [guestId], references: [id])
  guestId   Int
}

enum Role {
  USER
  AGENT
  SUPPORT
  ADMIN
}
